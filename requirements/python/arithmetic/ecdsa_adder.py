#!/usr/bin/env python3

import collections
import hashlib
import random

EllipticCurve = collections.namedtuple('EllipticCurve', 'name p a b g n h')

curve = EllipticCurve(
  'brainpool512r1',
  # Field characteristic.
  p=0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3,
  # Curve coefficients.
  a=0x7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA,
  b=0x3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723,
  # Base point.
  g=(0x81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822,
     0x7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892),
  # Subgroup order.
  n=0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069,
  # Subgroup cofactor.
  h=1,
)


# Modular arithmetic ##########################################################

def ecdsa_adder(k1, k2, p):
  """Returns the addition of k1, k2 modulo p.
  This function returns (k1 + k2) % p.
  p must be a prime.
  """

  return (k1 + k2) % p


print()

k1 = random.randrange(1, curve.p)

print("Adder Input 1:", hex(k1))

k2 = random.randrange(1, curve.p)

print("Adder Input 2:", hex(k2))

r = ecdsa_adder(k1, k2, curve.p)

print("Adder Output:", hex(r))
